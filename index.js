if (process.env.NODE_ENV !== "production") {
  require("dotenv").config();
}

const cors = require("cors");
const express = require("express");

const sequelize = require("./database");

// initializing model definitions
require("./models");

// fetching defined models
const User = sequelize.model("User");

// config vars
const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || "192.168.0.206";
// const HOST = process.env.HOST || "192.168.0.100";

const app = express();

app.use(cors());
// app.use(express.urlencoded({ extended: true }))
app.use(express.json());

app.use((req, res) => {
  res.status(200).send({ message: "testing successful." }).end();
});

app.listen(PORT, HOST, async () => {
  console.log(`server connected to http://${HOST}:${PORT}`);

  try {
    await sequelize.sync({
      // alter: true,
      force: true,
    });

    // Simple INSERT queries
    const jane = await User.create({ name: "Jane", age: 23, cash: 3000 });
    console.log(`Jane's autogenerated id: ${jane.id}`);

    // specifying which attributes to set in create method
    const user = await User.create(
      {
        username: "user123",
        age: 30,
        isAdmin: true,
      },
      { fields: ["username", "age"] }
    );
    await user.reload();
    console.log({ name: user.username, isAdmin: user.isAdmin });
    console.log(JSON.stringify(user, null, 2));

    // using fields prevents userId to save to database
    const alice = await User.create(
      { name: "Alice", age: 18, cash: 100 }
      // { fields: ["name", "age"] }
    );
    await alice.save();
    console.log(JSON.stringify(alice, null, 2));

    // Simple SELECT queries
    const users = await User.findAll();
    console.log(JSON.stringify(users, null, 2));

    // specifying attributes for SELECT quires
    const specificAttributes = await User.findAll({
      attributes: ["name", "age", "userId"],
    });
    console.log(JSON.stringify(specificAttributes, null, 2));

    const specificAttributesWithRenames = await User.findAll({
      attributes: ["name", "age", ["userId", "userid"], "cash"],
    });
    console.log(JSON.stringify(specificAttributesWithRenames, null, 2));

    const attributesWithAggregation = await User.findAll({
      attributes: [
        "name",
        [sequelize.fn("COUNT", sequelize.col("age")), "total_age"],
        "username",
        "cash",
      ],
      group: ["name", "username", "cash"],
      // option `group` is needed if attributes contains more thant just sequelize.fn
    });
    console.log(JSON.stringify(attributesWithAggregation, null, 2));

    const totalCash = await User.findAll({
      attributes: [[sequelize.fn("SUM", sequelize.col("cash")), "total_cash"]],
    });
    console.log(JSON.stringify(totalCash));

    const includeQuery = await User.findAll({
      attributes: {
        include: [[sequelize.fn("SUM", sequelize.col("cash")), "total_cash"]],
      },
      group: [
        "id",
        "name",
        "username",
        "cash",
        "favoriteColor",
        "age",
        "isAdmin",
        "userId",
        "createdAt",
        "updatedAt",
      ],
    });
    console.log(JSON.stringify(includeQuery, null, 4));

    const excludeQuery = await User.findAll({
      attributes: {
        exclude: [["cash", "isAdmin"]],
      },
    });
    console.log(JSON.stringify(excludeQuery, null, 2));
  } catch (e) {
    console.log({ e });
  }
});
